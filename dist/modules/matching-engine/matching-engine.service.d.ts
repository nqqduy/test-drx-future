import { Cache } from 'cache-manager';
import { Producer } from 'kafkajs';
import { AccountRepository } from 'src/models/repositories/account.repository';
import { FundingHistoryRepository } from 'src/models/repositories/funding-history.repository';
import { FundingRepository } from 'src/models/repositories/funding.repository';
import { MarginHistoryRepository } from 'src/models/repositories/margin-history.repository';
import { OrderRepository } from 'src/models/repositories/order.repository';
import { PositionHistoryRepository } from 'src/models/repositories/position-history.repository';
import { PositionRepository } from 'src/models/repositories/position.repository';
import { TradeRepository } from 'src/models/repositories/trade.repository';
import { TransactionRepository } from 'src/models/repositories/transaction.repository';
import { AccountService } from 'src/modules/account/account.service';
import { FundingService } from 'src/modules/funding/funding.service';
import { IndexService } from 'src/modules/index/index.service';
import { InstrumentService } from 'src/modules/instrument/instrument.service';
import { BaseEngineService } from 'src/modules/matching-engine/base-engine.service';
import { CommandOutput } from 'src/modules/matching-engine/matching-engine.const';
import { OrderService } from 'src/modules/order/order.service';
import { PositionService } from 'src/modules/position/position.service';
import { TradeService } from 'src/modules/trade/trade.service';
import { TransactionService } from 'src/modules/transaction/transaction.service';
import { OrderStatus } from 'src/shares/enums/order.enum';
import { UserMarginModeRepository } from 'src/models/repositories/user-margin-mode.repository';
import { InstrumentRepository } from 'src/models/repositories/instrument.repository';
import { LeverageMarginService } from '../leverage-margin/leverage-margin.service';
import { TradingRulesRepository } from 'src/models/repositories/trading-rules.repository';
import { KafkaClient } from 'src/shares/kafka-client/kafka-client';
export declare class MatchingEngineService extends BaseEngineService {
    private readonly accountService;
    private readonly fundingService;
    private readonly indexService;
    private readonly instrumentService;
    private readonly orderService;
    private readonly positionService;
    private readonly tradeService;
    private readonly transactionService;
    private readonly leverageMarginService;
    private readonly kafkaClient;
    private accountRepository;
    private accountRepoReport;
    private instrumentRepoReport;
    private positionRepository;
    private orderRepository;
    private tradeRepository;
    private transactionRepository;
    private fundingRepoMaster;
    private fundingHistoryRepoMaster;
    private positionHistoryRepoMaster;
    private marginHistoryRepoMaster;
    private userMarginModeRepoMaster;
    private cacheManager;
    private tradingRuleRepoReport;
    constructor(accountService: AccountService, fundingService: FundingService, indexService: IndexService, instrumentService: InstrumentService, orderService: OrderService, positionService: PositionService, tradeService: TradeService, transactionService: TransactionService, leverageMarginService: LeverageMarginService, kafkaClient: KafkaClient, accountRepository: AccountRepository, accountRepoReport: AccountRepository, instrumentRepoReport: InstrumentRepository, positionRepository: PositionRepository, orderRepository: OrderRepository, tradeRepository: TradeRepository, transactionRepository: TransactionRepository, fundingRepoMaster: FundingRepository, fundingHistoryRepoMaster: FundingHistoryRepository, positionHistoryRepoMaster: PositionHistoryRepository, marginHistoryRepoMaster: MarginHistoryRepository, userMarginModeRepoMaster: UserMarginModeRepository, cacheManager: Cache, tradingRuleRepoReport: TradingRulesRepository);
    initializeEngine(producer: Producer): Promise<void>;
    loadInstruments(producer: Producer): Promise<void>;
    loadInstrumentExtras(producer: Producer): Promise<void>;
    loadAccounts(producer: Producer): Promise<void>;
    loadPositions(producer: Producer): Promise<void>;
    loadPositionHistories(producer: Producer): Promise<void>;
    loadFundingHistories(producer: Producer): Promise<void>;
    loadOrders(producer: Producer): Promise<void>;
    loadOrderByStatus(status: OrderStatus, producer: Producer): Promise<void>;
    loadDeposits(producer: Producer): Promise<void>;
    loadWithdrawals(producer: Producer): Promise<void>;
    loadLeverageMargin(producer: Producer): Promise<void>;
    loadTradingRules(producer: Producer): Promise<void>;
    startEngine(producer: Producer): Promise<void>;
    saveAccounts(commands: CommandOutput[]): Promise<void>;
    savePositions(commands: CommandOutput[]): Promise<void>;
    saveOrders(commands: CommandOutput[]): Promise<void>;
    saveTrades(commands: CommandOutput[]): Promise<void>;
    saveTransactions(commands: CommandOutput[]): Promise<void>;
    savePositionHistories(commands: CommandOutput[]): Promise<void>;
    saveFunding(commands: CommandOutput[]): Promise<void>;
    saveMarginHistory(commands: CommandOutput[]): Promise<void>;
    saveMarginLeverage(commands: CommandOutput[]): Promise<void>;
    private savePositionHistoryTimestamp;
    private saveFundingHistoryTimestamp;
}
