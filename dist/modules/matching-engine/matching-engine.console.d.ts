import { Cache } from 'cache-manager';
import { AccountRepository } from 'src/models/repositories/account.repository';
import { IndexService } from 'src/modules/index/index.service';
import { InstrumentService } from 'src/modules/instrument/instrument.service';
import { CommandOutput } from 'src/modules/matching-engine/matching-engine.const';
import { MatchingEngineService } from 'src/modules/matching-engine/matching-engine.service';
import { NotificationService } from 'src/modules/matching-engine/notifications.service';
import { OrderService } from 'src/modules/order/order.service';
import { PositionService } from 'src/modules/position/position.service';
import { KafkaClient } from 'src/shares/kafka-client/kafka-client';
import { BalanceService } from '../balance/balance.service';
export declare class MatchingEngineConsole {
    private readonly balanceService;
    private readonly positionService;
    private readonly orderService;
    private readonly matchingEngineService;
    private readonly instrumentService;
    private readonly indexService;
    private readonly notificationService;
    readonly kafkaClient: KafkaClient;
    private accountRepository;
    private cacheManager;
    private readonly logger;
    constructor(balanceService: BalanceService, positionService: PositionService, orderService: OrderService, matchingEngineService: MatchingEngineService, instrumentService: InstrumentService, indexService: IndexService, notificationService: NotificationService, kafkaClient: KafkaClient, accountRepository: AccountRepository, cacheManager: Cache);
    load(): Promise<void>;
    getLaggedGroup(): Promise<{
        group: string;
        combinedLag: number;
    }>;
    saveAccounts(): Promise<void>;
    savePositions(): Promise<void>;
    saveOrders(): Promise<void>;
    saveTrades(): Promise<void>;
    saveTransactions(): Promise<void>;
    savePositionHistories(): Promise<void>;
    saveFunding(): Promise<void>;
    saveMarginHistories(): Promise<void>;
    saveMarginLeverage(): Promise<void>;
    getOffset(offset: string, topic: string): Promise<void>;
    saveEntities(groupId: string, callback: (commands: CommandOutput[]) => Promise<void>): Promise<void>;
    notify(): Promise<void>;
    private getInstrumentMap;
    private notifyAccounts;
    private notifyPositions;
    private notifyAdjustLeverage;
    private notifyAdjustMarginPosition;
    private notifyOrders;
    private loadMissingAccounts;
    private notifyTrades;
    private notifyNotifications;
    savePrefix(): Promise<void>;
}
