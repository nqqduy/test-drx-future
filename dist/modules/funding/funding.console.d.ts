import { Queue } from 'bull';
import { Cache } from 'cache-manager';
import { RedisService } from 'nestjs-redis';
import { FundingRepository } from 'src/models/repositories/funding.repository';
import { PositionRepository } from 'src/models/repositories/position.repository';
import { UserSettingRepository } from 'src/models/repositories/user-setting.repository';
import { UserRepository } from 'src/models/repositories/user.repository';
import { FundingService } from 'src/modules/funding/funding.service';
import { CommandOutput } from 'src/modules/matching-engine/matching-engine.const';
import { KafkaClient } from 'src/shares/kafka-client/kafka-client';
import { InstrumentService } from '../instrument/instrument.service';
import { MailService } from '../mail/mail.service';
import { NotificationService } from '../matching-engine/notifications.service';
export declare class FundingConsole {
    private readonly fundingService;
    private readonly mailService;
    private fundingRepositoryMaster;
    private fundingRepositoryReport;
    readonly kafkaClient: KafkaClient;
    private cacheManager;
    private readonly redisService;
    readonly userSettingRepoReport: UserSettingRepository;
    readonly userSettingMasterReport: UserSettingRepository;
    readonly userRepoReport: UserRepository;
    readonly userMasterReport: UserRepository;
    readonly positionRepoReport: PositionRepository;
    private readonly instrumentService;
    private readonly notificationService;
    private readonly emailQueue;
    private readonly logger;
    constructor(fundingService: FundingService, mailService: MailService, fundingRepositoryMaster: FundingRepository, fundingRepositoryReport: FundingRepository, kafkaClient: KafkaClient, cacheManager: Cache, redisService: RedisService, userSettingRepoReport: UserSettingRepository, userSettingMasterReport: UserSettingRepository, userRepoReport: UserRepository, userMasterReport: UserRepository, positionRepoReport: PositionRepository, instrumentService: InstrumentService, notificationService: NotificationService, emailQueue: Queue);
    calculateFundingRate(): Promise<void>;
    saveFundingToDB(symbol: any, fundingRate: any, time: any, oraclePrice: any, nextFunding: any): Promise<void>;
    private payFundingForContract;
    private getPositionHistoryTimestamp;
    private getFundingHistoryTimestamp;
    private getFundingRate;
    private updateFundingRate;
    closeInsurance(): Promise<void>;
    sendMail(groupId: string, callback: (command: CommandOutput) => Promise<void>): Promise<void>;
    sendMailFundingFee(): Promise<void>;
}
