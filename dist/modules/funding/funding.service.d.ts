import { Cache } from 'cache-manager';
import { RedisService } from 'nestjs-redis';
import { FundingHistoryEntity } from 'src/models/entities/funding-history.entity';
import { FundingEntity } from 'src/models/entities/funding.entity';
import { FundingHistoryRepository } from 'src/models/repositories/funding-history.repository';
import { FundingRepository } from 'src/models/repositories/funding.repository';
import { InstrumentRepository } from 'src/models/repositories/instrument.repository';
import { MarketIndexRepository } from 'src/models/repositories/market-indices.repository';
import { PositionRepository } from 'src/models/repositories/position.repository';
import { UserSettingRepository } from 'src/models/repositories/user-setting.repository';
import { ImpactPrice, MarketIndex } from 'src/modules/funding/funding.dto';
import { FromToDto } from 'src/shares/dtos/from-to.dto';
import { Connection } from 'typeorm';
import { LeverageMarginService } from '../leverage-margin/leverage-margin.service';
import { MailService } from '../mail/mail.service';
import { NotificationService } from '../matching-engine/notifications.service';
export declare class FundingService {
    private fundingRepositoryMaster;
    private fundingRepositoryReport;
    private instrumentRepositoryMaster;
    private instrumentRepositoryReport;
    private fundingHistoryRepositoryReport;
    private marketIndexRepositoryMaster;
    private marketIndicesRepositoryReport;
    readonly positionRepoReport: PositionRepository;
    readonly userSettingRepoReport: UserSettingRepository;
    private cacheManager;
    private readonly redisService;
    private connection;
    private readonly leverageMarginService;
    private readonly mailService;
    private readonly notificationService;
    private readonly logger;
    constructor(fundingRepositoryMaster: FundingRepository, fundingRepositoryReport: FundingRepository, instrumentRepositoryMaster: InstrumentRepository, instrumentRepositoryReport: InstrumentRepository, fundingHistoryRepositoryReport: FundingHistoryRepository, marketIndexRepositoryMaster: MarketIndexRepository, marketIndicesRepositoryReport: MarketIndexRepository, positionRepoReport: PositionRepository, userSettingRepoReport: UserSettingRepository, cacheManager: Cache, redisService: RedisService, connection: Connection, leverageMarginService: LeverageMarginService, mailService: MailService, notificationService: NotificationService);
    fundingRateCaculation(impactBidPrice: number, impactAskPrice: number, indexPrice: number, interestRate: number, maintainMargin: number): string;
    caculatePriceImpact(asksOrBids: string[][], marginAmount: number, indexPrice: number): number;
    caculateCoinMImpactPrice(asksOrBids: string[][], marginAmount: number, indexPrice: number): number;
    getImpactPrice(symbol: string, price: number): Promise<ImpactPrice>;
    getImpactPriceCoinM(symbol: string, price: number): Promise<{
        impactBidPrice: number;
        impactAskPrice: number;
        interestRate: number;
        maintainMargin: number;
    }>;
    getMarketIndex(): Promise<MarketIndex[]>;
    getFundingRates(symbols: string[]): Promise<string[]>;
    saveFundingRate(symbol: string, fundingRate: string): Promise<void>;
    getNextFunding(symbol: string): Promise<number>;
    fundingRate(symbol: string): Promise<any>;
    setLastPay(): Promise<void>;
    setLastUpdate(): Promise<void>;
    getLastPay(): Promise<number | undefined>;
    getLastUpdate(): Promise<number | undefined>;
    getFundingHistoryByAccountId(symbol?: string): Promise<any[]>;
    getFundingRatesFromTo(symbol: string, { from, to }: FromToDto): Promise<FundingEntity[]>;
    findHistoryBefore(date: Date): Promise<FundingHistoryEntity | undefined>;
    findHistoryBatch(fromId: number, count: number): Promise<FundingHistoryEntity[]>;
    sendMailFundingFee(dataFundingRates: any[]): Promise<void>;
}
