import { AdminPositionDto } from './dto/admin-position.dto';
import { Cache } from 'cache-manager';
import { PositionHistoryEntity } from 'src/models/entities/position-history.entity';
import { PositionEntity } from 'src/models/entities/position.entity';
import { PositionHistoryRepository } from 'src/models/repositories/position-history.repository';
import { PositionRepository } from 'src/models/repositories/position.repository';
import { PaginationDto } from 'src/shares/dtos/pagination.dto';
import { ResponseDto } from 'src/shares/dtos/response.dto';
import { KafkaClient } from 'src/shares/kafka-client/kafka-client';
import { AccountService } from '../account/account.service';
import { UpdateMarginDto } from './dto/update-margin.dto';
import { ClosePositionDto } from './dto/close-position.dto';
import { OrderRepository } from 'src/models/repositories/order.repository';
import { ContractType } from 'src/shares/enums/order.enum';
import { InstrumentRepository } from 'src/models/repositories/instrument.repository';
import { UserMarginModeRepository } from 'src/models/repositories/user-margin-mode.repository';
import { BaseEngineService } from '../matching-engine/base-engine.service';
import { OrderEntity } from 'src/models/entities/order.entity';
import { UpdatePositionDto } from './dto/update-position.dto';
import { RemoveTpSlDto } from './dto/RemoveTpSlDto';
import { InstrumentService } from '../instrument/instrument.service';
import { AccountRepository } from 'src/models/repositories/account.repository';
import { TradingRulesRepository } from 'src/models/repositories/trading-rules.repository';
import { RedisService } from 'nestjs-redis';
import { UserRepository } from 'src/models/repositories/user.repository';
import { MarketDataRepository } from 'src/models/repositories/market-data.repository';
import { FundingHistoryRepository } from 'src/models/repositories/funding-history.repository';
import { MarginHistoryRepository } from 'src/models/repositories/margin-history.repository';
import { TradingRulesService } from '../trading-rules/trading-rule.service';
import { IndexService } from '../index/index.service';
import { LeverageMarginRepository } from 'src/models/repositories/leverage-margin.repository';
export declare class PositionService extends BaseEngineService {
    readonly positionRepoReport: PositionRepository;
    readonly positionRepoMaster: PositionRepository;
    readonly positionHistoryRepository: PositionHistoryRepository;
    readonly fundingHistoryRepository: FundingHistoryRepository;
    readonly marginHistoryRepository: MarginHistoryRepository;
    private readonly accountService;
    private cacheManager;
    readonly kafkaClient: KafkaClient;
    readonly orderRepoReport: OrderRepository;
    readonly orderRepoMaster: OrderRepository;
    readonly instrumentRepoReport: InstrumentRepository;
    readonly accountRepoReport: AccountRepository;
    readonly tradingRulesRepoReport: TradingRulesRepository;
    readonly userMarginModeRepoReport: UserMarginModeRepository;
    readonly userRepoReport: UserRepository;
    readonly leverageMarginRepoReport: LeverageMarginRepository;
    readonly instrumentService: InstrumentService;
    private readonly redisService;
    private readonly tradingRulesService;
    readonly indexService: IndexService;
    private marketDataRepositoryReport;
    constructor(positionRepoReport: PositionRepository, positionRepoMaster: PositionRepository, positionHistoryRepository: PositionHistoryRepository, fundingHistoryRepository: FundingHistoryRepository, marginHistoryRepository: MarginHistoryRepository, accountService: AccountService, cacheManager: Cache, kafkaClient: KafkaClient, orderRepoReport: OrderRepository, orderRepoMaster: OrderRepository, instrumentRepoReport: InstrumentRepository, accountRepoReport: AccountRepository, tradingRulesRepoReport: TradingRulesRepository, userMarginModeRepoReport: UserMarginModeRepository, userRepoReport: UserRepository, leverageMarginRepoReport: LeverageMarginRepository, instrumentService: InstrumentService, redisService: RedisService, tradingRulesService: TradingRulesService, indexService: IndexService, marketDataRepositoryReport: MarketDataRepository);
    getAllPositionByUserId(userId: number, paging: PaginationDto, contractType: ContractType, symbol?: string): Promise<{
        data: any;
        metadata: {
            totalPage: number;
            totalItem: number;
        };
    }>;
    getAllPositionWithQuantity(userId: number, contractType: ContractType, symbol?: string): Promise<{
        data: any;
    }>;
    getAllPositionByAdmin(paging: PaginationDto, queries?: AdminPositionDto): Promise<ResponseDto<PositionEntity[]>>;
    getPositionById(positionId: number): Promise<PositionEntity>;
    findBatch(fromId: number, count: number): Promise<PositionEntity[]>;
    findHistoryBefore(date: Date): Promise<PositionHistoryEntity | undefined>;
    findHistoryBatch(fromId: number, count: number): Promise<PositionHistoryEntity[]>;
    getLastPositionId(): Promise<number>;
    getPositionByUserIdBySymbol(userId: number, symbol: string): Promise<PositionEntity>;
    updateMargin(userId: number, updateMarginDto: UpdateMarginDto): Promise<boolean>;
    closePosition(userId: number, body: ClosePositionDto): Promise<OrderEntity>;
    closeAllPosition(userId: number, contractType: ContractType): Promise<boolean>;
    private validateUpdatePosition;
    updatePosition(userId: number, updatePositionDto: UpdatePositionDto): Promise<void>;
    removeTpSlPosition(userId: number, removeTpSlDto: RemoveTpSlDto): Promise<void>;
    getTpSlOrderPosition(userId: number, positionId: number): Promise<OrderEntity[]>;
    calPositionMarginForAcc(accountId: number, asset: string): Promise<{
        positionMargin: string;
        unrealizedPNL: string;
        positionMarginCross: string;
        positionMarginIsIsolate: string;
    }>;
    calPositionMarginIsIsolate(symbols: any, accountId: number, asset: string): Promise<any>;
    CalPositionMarginIsCross(accountId: number, asset: string): Promise<{
        margin: string;
        pnl: string;
    }>;
    updatePositions(): Promise<void>;
    calculateIndexPriceAverage(symbol: string): Promise<{
        averageIndexPrice: string;
        history: import("../../models/entities/market-data.entity").MarketDataEntity[];
    }>;
    private validateMinMaxPrice;
    closeAllPositionCommand(symbol?: string): Promise<void>;
    updateIdPositionCommand(): Promise<void>;
    getInforPositions(userId: number, symbol?: string): Promise<any[]>;
    private getLeverageMargin;
    private calMaintenanceMargin;
    private calMarginBalanceForCrossUSDM;
    private calMarginBalanceForCrossCOINM;
    private calMarginBalanceForIso;
    private getInforAPosition;
}
