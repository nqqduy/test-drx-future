import { Cache } from 'cache-manager';
import { RedisService } from 'nestjs-redis';
import { CandlesEntity } from 'src/models/entities/candles.entity';
import { CandlesRepository } from 'src/models/repositories/candles.repository';
import { MetadataRepository } from 'src/models/repositories/metadata.repository';
import { Candle } from 'src/modules/candle/candle.const';
import { TradeData } from 'src/modules/candle/candle.dto';
import { InstrumentService } from 'src/modules/instrument/instrument.service';
import { CommandOutput } from 'src/modules/matching-engine/matching-engine.const';
import { Connection } from 'typeorm';
export declare class CandleService {
    private readonly instrumentService;
    private candleRepositoryMaster;
    private candleRepositoryReport;
    private metadataRepositoryMaster;
    private metadataRepositoryReport;
    private readonly cacheService;
    private readonly redisService;
    private connection;
    private readonly logger;
    private resolutions;
    constructor(instrumentService: InstrumentService, candleRepositoryMaster: CandlesRepository, candleRepositoryReport: CandlesRepository, metadataRepositoryMaster: MetadataRepository, metadataRepositoryReport: MetadataRepository, cacheService: Cache, redisService: RedisService, connection: Connection);
    getMinute(epoch: number): number;
    getSecond(epoch: number): number;
    storeCandle(symbols: string[]): Promise<void>;
    handleMessage(commandOutputs: CommandOutput[]): Promise<void>;
    handleTrade(data: TradeData): Promise<void>;
    getCandles(symbol: string, from: number, to: number, resolution: string): Promise<Candle[]>;
    getCandlesData(symbol: string, from: number, to: number, resolution: number): Promise<CandlesEntity[]>;
    syncCandles(): Promise<void>;
    setLastUpdate(): Promise<void>;
    getLastUpdate(): Promise<number | undefined>;
    syncTrades(): Promise<void>;
    private saveExtraResolutions;
    private saveCandleInResolution;
    private getOpenPrice;
    private getClosePrice;
    private combineCandlesData;
    private getLastCandle;
    private getLastCandleFromDatabase;
    private getCandleKey;
    private getLastCandleKey;
    private _getCandles;
    private getCandleTime;
    private standardizeCandleTime;
    private addCandlesFromCache;
    private addCandleFromCache;
    private getCandleFromEntity;
    private addMissingHeadCandles;
    private addMissingTailCandles;
}
