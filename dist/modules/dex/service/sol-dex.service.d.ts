import { Logger } from '@nestjs/common';
import { AccountRepository } from 'src/models/repositories/account.repository';
import { DexActionHistoryRepository } from 'src/models/repositories/dex-action-history-repository';
import { DexActionSolTxRepository } from 'src/models/repositories/dex-action-sol-txs.repository';
import { DexActionTransactionRepository } from 'src/models/repositories/dex-action-transaction.repository';
import { DexActionRepository } from 'src/models/repositories/dex-action.repository';
import { FundingHistoryRepository } from 'src/models/repositories/funding-history.repository';
import { InstrumentRepository } from 'src/models/repositories/instrument.repository';
import { LatestSignatureRepository } from 'src/models/repositories/latest-signature.repository';
import { MarginHistoryRepository } from 'src/models/repositories/margin-history.repository';
import { TransactionRepository } from 'src/models/repositories/transaction.repository';
import { LatestBlockService } from 'src/modules/latest-block/latest-block.service';
import { Connection } from 'typeorm';
export declare class SolDexService {
    private readonly logger;
    private readonly latestBlockService;
    private masterConnection;
    private reportMarginHistoryRepo;
    readonly transactionRepoMaster: TransactionRepository;
    readonly reportTransactionRepo: TransactionRepository;
    private reportInstrumentRepo;
    readonly dexActionRepo: DexActionRepository;
    readonly reportDexActionRepo: DexActionRepository;
    readonly dexActionTransactionRepo: DexActionTransactionRepository;
    readonly reportDexActionTransactionRepo: DexActionTransactionRepository;
    readonly dexActionHistoryRepo: DexActionHistoryRepository;
    readonly reportDexActionHistoryRepo: DexActionHistoryRepository;
    private reportAccountRepo;
    private reportFundingHistoryRepo;
    private dexActionSolTxRepo;
    private reportDexActionSolTxRepo;
    private latestSignatureRepo;
    private reportLatestSignatureRepo;
    private instrumentIds;
    private accountIdsToAddresses;
    private accountAddressesToIds;
    private accountIdsToUserIds;
    private readonly dexWrapper;
    constructor(logger: Logger, latestBlockService: LatestBlockService, masterConnection: Connection, reportMarginHistoryRepo: MarginHistoryRepository, transactionRepoMaster: TransactionRepository, reportTransactionRepo: TransactionRepository, reportInstrumentRepo: InstrumentRepository, dexActionRepo: DexActionRepository, reportDexActionRepo: DexActionRepository, dexActionTransactionRepo: DexActionTransactionRepository, reportDexActionTransactionRepo: DexActionTransactionRepository, dexActionHistoryRepo: DexActionHistoryRepository, reportDexActionHistoryRepo: DexActionHistoryRepository, reportAccountRepo: AccountRepository, reportFundingHistoryRepo: FundingHistoryRepository, dexActionSolTxRepo: DexActionSolTxRepository, reportDexActionSolTxRepo: DexActionSolTxRepository, latestSignatureRepo: LatestSignatureRepository, reportLatestSignatureRepo: LatestSignatureRepository);
    handlePickDexActions(): Promise<void>;
    handleSendDexActions(): Promise<void>;
    handleVerifyDexActions(): Promise<void>;
    handleCrawlSignature(): Promise<void>;
    saveSignatures(signatures: {
        slot: string;
        signature: string;
    }[], service: string): Promise<void>;
    handleHistoryDexActions(): Promise<void>;
    handleBalanceCheckerDexActions(): Promise<void>;
    private _handlePickDexActions;
    private _handleSendDexActions;
    private dexActionTypeToString;
    private _getInstrumentId;
    private _getAccountAddress;
    private _getAccountOwnerId;
    private _getAccountId;
}
